{"project_json": {"name": "linear-dashboards", "defaults": {"target_name": "remote-snowflake"}, "cli_version": "1.0.24", "includes": [{"path": "dashboard/dashboard.visivo.yml"}], "alerts": [], "targets": [], "models": [], "traces": [], "tables": [], "charts": [], "selectors": [], "dashboards": [{"name": "Linear Dashboard", "rows": [{"height": "small", "items": [{"width": 1, "chart": {"name": "Hours To Triage", "selector": {"name": "big-number-selector", "type": "single", "options": [{"name": "time-to-triage-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "time-to-triage-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(started_triage_at > dateadd('day', -90, current_date ))"], "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "triage-to-start-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "triage-to-start-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "start-to-completed-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "start-to-completed-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "issues-created-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "filters": ["query(completed_at is not null)"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(completed_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('day', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('week', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('year', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issue-distribution-Done", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Done'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Done' )"], "props": {"fillcolor": "#5e6ad2", "line": {"color": "#5e6ad2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Canceled", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Canceled'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Canceled' )"], "props": {"fillcolor": "#95a2b3", "line": {"color": "#95a2b3", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Review", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Review'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Review' )"], "props": {"fillcolor": "#0f783c", "line": {"color": "#0f783c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Progress", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Progress'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Progress' )"], "props": {"fillcolor": "#f2c94c", "line": {"color": "#f2c94c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-On Deck", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'On Deck'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'On Deck' )"], "props": {"fillcolor": "#db6e1f", "line": {"color": "#db6e1f", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Todo", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Todo'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Todo' )"], "props": {"fillcolor": "#e2e2e2", "line": {"color": "#e2e2e2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Backlog", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Backlog'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Backlog' )"], "props": {"fillcolor": "#bec2c8", "line": {"color": "#bec2c8", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Triage", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Triage'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Triage' )"], "props": {"fillcolor": "#FC7840", "line": {"color": "#FC7840", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "sankey-trace-All Time", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}, {"name": "sankey-trace-Last 90 Days", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at >= dateadd('day', -90, sysdate()::date))"], "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}], "parent_name": "Hours To Triage"}, "traces": [{"name": "time-to-triage-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "time-to-triage-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(started_triage_at > dateadd('day', -90, current_date ))"], "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}], "layout": {"title": {"font": {"size": 19.0}, "text": "Created To Triaged"}}}}, {"width": 1, "chart": {"name": "Hours Triage To Start", "selector": {"name": "big-number-selector", "type": "single", "options": [{"name": "time-to-triage-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "time-to-triage-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(started_triage_at > dateadd('day', -90, current_date ))"], "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "triage-to-start-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "triage-to-start-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "start-to-completed-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "start-to-completed-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "issues-created-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "filters": ["query(completed_at is not null)"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(completed_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('day', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('week', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('year', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issue-distribution-Done", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Done'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Done' )"], "props": {"fillcolor": "#5e6ad2", "line": {"color": "#5e6ad2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Canceled", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Canceled'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Canceled' )"], "props": {"fillcolor": "#95a2b3", "line": {"color": "#95a2b3", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Review", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Review'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Review' )"], "props": {"fillcolor": "#0f783c", "line": {"color": "#0f783c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Progress", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Progress'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Progress' )"], "props": {"fillcolor": "#f2c94c", "line": {"color": "#f2c94c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-On Deck", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'On Deck'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'On Deck' )"], "props": {"fillcolor": "#db6e1f", "line": {"color": "#db6e1f", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Todo", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Todo'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Todo' )"], "props": {"fillcolor": "#e2e2e2", "line": {"color": "#e2e2e2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Backlog", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Backlog'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Backlog' )"], "props": {"fillcolor": "#bec2c8", "line": {"color": "#bec2c8", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Triage", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Triage'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Triage' )"], "props": {"fillcolor": "#FC7840", "line": {"color": "#FC7840", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "sankey-trace-All Time", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}, {"name": "sankey-trace-Last 90 Days", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at >= dateadd('day', -90, sysdate()::date))"], "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}], "parent_name": "Hours To Triage"}, "traces": [{"name": "triage-to-start-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "triage-to-start-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}], "layout": {"title": {"font": {"size": 19.0}, "text": "Triaged To Started"}}}}, {"width": 1, "chart": {"name": "Hours Start To Completed", "selector": {"name": "big-number-selector", "type": "single", "options": [{"name": "time-to-triage-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "time-to-triage-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(started_triage_at > dateadd('day', -90, current_date ))"], "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "triage-to-start-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "triage-to-start-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "start-to-completed-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "start-to-completed-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "issues-created-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "filters": ["query(completed_at is not null)"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(completed_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('day', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('week', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('year', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issue-distribution-Done", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Done'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Done' )"], "props": {"fillcolor": "#5e6ad2", "line": {"color": "#5e6ad2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Canceled", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Canceled'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Canceled' )"], "props": {"fillcolor": "#95a2b3", "line": {"color": "#95a2b3", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Review", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Review'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Review' )"], "props": {"fillcolor": "#0f783c", "line": {"color": "#0f783c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Progress", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Progress'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Progress' )"], "props": {"fillcolor": "#f2c94c", "line": {"color": "#f2c94c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-On Deck", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'On Deck'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'On Deck' )"], "props": {"fillcolor": "#db6e1f", "line": {"color": "#db6e1f", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Todo", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Todo'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Todo' )"], "props": {"fillcolor": "#e2e2e2", "line": {"color": "#e2e2e2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Backlog", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Backlog'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Backlog' )"], "props": {"fillcolor": "#bec2c8", "line": {"color": "#bec2c8", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Triage", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Triage'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Triage' )"], "props": {"fillcolor": "#FC7840", "line": {"color": "#FC7840", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "sankey-trace-All Time", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}, {"name": "sankey-trace-Last 90 Days", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at >= dateadd('day', -90, sysdate()::date))"], "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}], "parent_name": "Hours To Triage"}, "traces": [{"name": "start-to-completed-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "start-to-completed-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}], "layout": {"title": {"font": {"size": 19.0}, "text": "Started To Completed"}}}}, {"width": 1, "chart": {"name": "Issues Created Per Week", "selector": {"name": "big-number-selector", "type": "single", "options": [{"name": "time-to-triage-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "time-to-triage-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(started_triage_at > dateadd('day', -90, current_date ))"], "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "triage-to-start-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "triage-to-start-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "start-to-completed-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "start-to-completed-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "issues-created-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "filters": ["query(completed_at is not null)"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(completed_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('day', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('week', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('year', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issue-distribution-Done", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Done'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Done' )"], "props": {"fillcolor": "#5e6ad2", "line": {"color": "#5e6ad2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Canceled", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Canceled'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Canceled' )"], "props": {"fillcolor": "#95a2b3", "line": {"color": "#95a2b3", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Review", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Review'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Review' )"], "props": {"fillcolor": "#0f783c", "line": {"color": "#0f783c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Progress", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Progress'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Progress' )"], "props": {"fillcolor": "#f2c94c", "line": {"color": "#f2c94c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-On Deck", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'On Deck'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'On Deck' )"], "props": {"fillcolor": "#db6e1f", "line": {"color": "#db6e1f", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Todo", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Todo'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Todo' )"], "props": {"fillcolor": "#e2e2e2", "line": {"color": "#e2e2e2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Backlog", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Backlog'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Backlog' )"], "props": {"fillcolor": "#bec2c8", "line": {"color": "#bec2c8", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Triage", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Triage'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Triage' )"], "props": {"fillcolor": "#FC7840", "line": {"color": "#FC7840", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "sankey-trace-All Time", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}, {"name": "sankey-trace-Last 90 Days", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at >= dateadd('day', -90, sysdate()::date))"], "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}], "parent_name": "Hours To Triage"}, "traces": [{"name": "issues-created-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}], "layout": {"title": {"font": {"size": 19.0}, "text": "Created per Week"}}}}, {"width": 1, "chart": {"name": "Issues Completed Per Week", "selector": {"name": "big-number-selector", "type": "single", "options": [{"name": "time-to-triage-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "time-to-triage-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(started_triage_at > dateadd('day', -90, current_date ))"], "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "triage-to-start-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "triage-to-start-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "start-to-completed-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "start-to-completed-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "issues-created-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "filters": ["query(completed_at is not null)"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(completed_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('day', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('week', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('year', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issue-distribution-Done", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Done'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Done' )"], "props": {"fillcolor": "#5e6ad2", "line": {"color": "#5e6ad2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Canceled", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Canceled'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Canceled' )"], "props": {"fillcolor": "#95a2b3", "line": {"color": "#95a2b3", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Review", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Review'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Review' )"], "props": {"fillcolor": "#0f783c", "line": {"color": "#0f783c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Progress", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Progress'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Progress' )"], "props": {"fillcolor": "#f2c94c", "line": {"color": "#f2c94c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-On Deck", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'On Deck'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'On Deck' )"], "props": {"fillcolor": "#db6e1f", "line": {"color": "#db6e1f", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Todo", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Todo'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Todo' )"], "props": {"fillcolor": "#e2e2e2", "line": {"color": "#e2e2e2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Backlog", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Backlog'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Backlog' )"], "props": {"fillcolor": "#bec2c8", "line": {"color": "#bec2c8", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Triage", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Triage'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Triage' )"], "props": {"fillcolor": "#FC7840", "line": {"color": "#FC7840", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "sankey-trace-All Time", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}, {"name": "sankey-trace-Last 90 Days", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at >= dateadd('day', -90, sysdate()::date))"], "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}], "parent_name": "Hours To Triage"}, "traces": [{"name": "issues-completed-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "filters": ["query(completed_at is not null)"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(completed_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}], "layout": {"title": {"font": {"size": 19.0}, "text": "Completed per Week"}}}}]}, {"height": "medium", "items": [{"width": 1, "chart": {"name": "issues-created-total-over-time", "selector": {"name": "issue_metrics_date_grain", "type": "single", "options": [{"name": "time-to-triage-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "time-to-triage-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(started_triage_at > dateadd('day', -90, current_date ))"], "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "triage-to-start-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "triage-to-start-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "start-to-completed-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "start-to-completed-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "issues-created-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "filters": ["query(completed_at is not null)"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(completed_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('day', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('week', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('year', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issue-distribution-Done", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Done'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Done' )"], "props": {"fillcolor": "#5e6ad2", "line": {"color": "#5e6ad2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Canceled", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Canceled'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Canceled' )"], "props": {"fillcolor": "#95a2b3", "line": {"color": "#95a2b3", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Review", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Review'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Review' )"], "props": {"fillcolor": "#0f783c", "line": {"color": "#0f783c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Progress", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Progress'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Progress' )"], "props": {"fillcolor": "#f2c94c", "line": {"color": "#f2c94c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-On Deck", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'On Deck'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'On Deck' )"], "props": {"fillcolor": "#db6e1f", "line": {"color": "#db6e1f", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Todo", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Todo'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Todo' )"], "props": {"fillcolor": "#e2e2e2", "line": {"color": "#e2e2e2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Backlog", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Backlog'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Backlog' )"], "props": {"fillcolor": "#bec2c8", "line": {"color": "#bec2c8", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Triage", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Triage'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Triage' )"], "props": {"fillcolor": "#FC7840", "line": {"color": "#FC7840", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "sankey-trace-All Time", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}, {"name": "sankey-trace-Last 90 Days", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at >= dateadd('day', -90, sysdate()::date))"], "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}], "parent_name": "issues-created-total-over-time"}, "traces": [{"name": "issues-created-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-created-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('day', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-created-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('week', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-created-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-created-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('year', created_at)::date::varchar)", "y": "query(count(*) )"}}], "layout": {"legend": {"orientation": "h", "valign": "bottom"}, "title": {"text": "Issues Created"}, "barmode": "stack"}}}, {"width": 1, "chart": {"name": "issues-completed-total-over-time", "selector": {"name": "issue_metrics_date_grain", "type": "single", "options": [{"name": "time-to-triage-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "time-to-triage-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(started_triage_at > dateadd('day', -90, current_date ))"], "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "triage-to-start-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "triage-to-start-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "start-to-completed-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "start-to-completed-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "issues-created-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "filters": ["query(completed_at is not null)"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(completed_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('day', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('week', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('year', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issue-distribution-Done", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Done'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Done' )"], "props": {"fillcolor": "#5e6ad2", "line": {"color": "#5e6ad2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Canceled", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Canceled'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Canceled' )"], "props": {"fillcolor": "#95a2b3", "line": {"color": "#95a2b3", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Review", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Review'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Review' )"], "props": {"fillcolor": "#0f783c", "line": {"color": "#0f783c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Progress", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Progress'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Progress' )"], "props": {"fillcolor": "#f2c94c", "line": {"color": "#f2c94c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-On Deck", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'On Deck'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'On Deck' )"], "props": {"fillcolor": "#db6e1f", "line": {"color": "#db6e1f", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Todo", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Todo'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Todo' )"], "props": {"fillcolor": "#e2e2e2", "line": {"color": "#e2e2e2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Backlog", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Backlog'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Backlog' )"], "props": {"fillcolor": "#bec2c8", "line": {"color": "#bec2c8", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Triage", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Triage'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Triage' )"], "props": {"fillcolor": "#FC7840", "line": {"color": "#FC7840", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "sankey-trace-All Time", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}, {"name": "sankey-trace-Last 90 Days", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at >= dateadd('day', -90, sysdate()::date))"], "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}], "parent_name": "issues-created-total-over-time"}, "traces": [{"name": "issues-completed-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query(count(*) )"}}], "layout": {"legend": {"orientation": "h", "valign": "bottom"}, "title": {"text": "Issues Completed"}, "barmode": "stack"}}}, {"width": 1, "chart": {"name": "time-to-complete-total-over-time", "selector": {"name": "issue_metrics_date_grain", "type": "single", "options": [{"name": "time-to-triage-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "time-to-triage-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(started_triage_at > dateadd('day', -90, current_date ))"], "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "triage-to-start-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "triage-to-start-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "start-to-completed-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "start-to-completed-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "issues-created-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "filters": ["query(completed_at is not null)"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(completed_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('day', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('week', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('year', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issue-distribution-Done", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Done'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Done' )"], "props": {"fillcolor": "#5e6ad2", "line": {"color": "#5e6ad2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Canceled", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Canceled'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Canceled' )"], "props": {"fillcolor": "#95a2b3", "line": {"color": "#95a2b3", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Review", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Review'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Review' )"], "props": {"fillcolor": "#0f783c", "line": {"color": "#0f783c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Progress", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Progress'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Progress' )"], "props": {"fillcolor": "#f2c94c", "line": {"color": "#f2c94c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-On Deck", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'On Deck'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'On Deck' )"], "props": {"fillcolor": "#db6e1f", "line": {"color": "#db6e1f", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Todo", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Todo'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Todo' )"], "props": {"fillcolor": "#e2e2e2", "line": {"color": "#e2e2e2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Backlog", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Backlog'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Backlog' )"], "props": {"fillcolor": "#bec2c8", "line": {"color": "#bec2c8", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Triage", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Triage'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Triage' )"], "props": {"fillcolor": "#FC7840", "line": {"color": "#FC7840", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "sankey-trace-All Time", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}, {"name": "sankey-trace-Last 90 Days", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at >= dateadd('day', -90, sysdate()::date))"], "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}], "parent_name": "issues-created-total-over-time"}, "traces": [{"name": "time-to-complete-issues-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "time-to-complete-issues-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "time-to-complete-issues-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "time-to-complete-issues-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "time-to-complete-issues-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}], "layout": {"legend": {"orientation": "h", "valign": "bottom"}, "title": {"text": "Time To Complete Issues"}, "yaxis": {"title": {"text": "Days"}}}}}]}, {"height": "large", "items": [{"width": 1, "chart": {"name": "issues-distribution-daily", "selector": {"name": "issues-distribution-daily Selector", "type": "multiple", "options": [{"name": "time-to-triage-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "time-to-triage-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(started_triage_at > dateadd('day', -90, current_date ))"], "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "triage-to-start-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "triage-to-start-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "start-to-completed-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "start-to-completed-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "issues-created-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "filters": ["query(completed_at is not null)"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(completed_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('day', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('week', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('year', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issue-distribution-Done", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Done'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Done' )"], "props": {"fillcolor": "#5e6ad2", "line": {"color": "#5e6ad2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Canceled", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Canceled'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Canceled' )"], "props": {"fillcolor": "#95a2b3", "line": {"color": "#95a2b3", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Review", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Review'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Review' )"], "props": {"fillcolor": "#0f783c", "line": {"color": "#0f783c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Progress", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Progress'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Progress' )"], "props": {"fillcolor": "#f2c94c", "line": {"color": "#f2c94c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-On Deck", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'On Deck'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'On Deck' )"], "props": {"fillcolor": "#db6e1f", "line": {"color": "#db6e1f", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Todo", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Todo'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Todo' )"], "props": {"fillcolor": "#e2e2e2", "line": {"color": "#e2e2e2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Backlog", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Backlog'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Backlog' )"], "props": {"fillcolor": "#bec2c8", "line": {"color": "#bec2c8", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Triage", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Triage'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Triage' )"], "props": {"fillcolor": "#FC7840", "line": {"color": "#FC7840", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "sankey-trace-All Time", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}, {"name": "sankey-trace-Last 90 Days", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at >= dateadd('day', -90, sysdate()::date))"], "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}], "parent_name": "issues-distribution-daily"}, "traces": [{"name": "issue-distribution-Done", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Done'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Done' )"], "props": {"fillcolor": "#5e6ad2", "line": {"color": "#5e6ad2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Canceled", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Canceled'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Canceled' )"], "props": {"fillcolor": "#95a2b3", "line": {"color": "#95a2b3", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Review", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Review'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Review' )"], "props": {"fillcolor": "#0f783c", "line": {"color": "#0f783c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Progress", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Progress'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Progress' )"], "props": {"fillcolor": "#f2c94c", "line": {"color": "#f2c94c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-On Deck", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'On Deck'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'On Deck' )"], "props": {"fillcolor": "#db6e1f", "line": {"color": "#db6e1f", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Todo", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Todo'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Todo' )"], "props": {"fillcolor": "#e2e2e2", "line": {"color": "#e2e2e2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Backlog", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Backlog'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Backlog' )"], "props": {"fillcolor": "#bec2c8", "line": {"color": "#bec2c8", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Triage", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Triage'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Triage' )"], "props": {"fillcolor": "#FC7840", "line": {"color": "#FC7840", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}], "layout": {"title": {"text": "Issues Distribution"}}}}, {"width": 1, "chart": {"name": "sankey-chart", "selector": {"name": "big-number-selector", "type": "single", "options": [{"name": "time-to-triage-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "time-to-triage-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(started_triage_at > dateadd('day', -90, current_date ))"], "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "triage-to-start-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "triage-to-start-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "start-to-completed-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "start-to-completed-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "issues-created-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "filters": ["query(completed_at is not null)"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(completed_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('day', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('week', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('year', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issue-distribution-Done", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Done'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Done' )"], "props": {"fillcolor": "#5e6ad2", "line": {"color": "#5e6ad2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Canceled", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Canceled'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Canceled' )"], "props": {"fillcolor": "#95a2b3", "line": {"color": "#95a2b3", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Review", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Review'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Review' )"], "props": {"fillcolor": "#0f783c", "line": {"color": "#0f783c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Progress", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Progress'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Progress' )"], "props": {"fillcolor": "#f2c94c", "line": {"color": "#f2c94c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-On Deck", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'On Deck'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'On Deck' )"], "props": {"fillcolor": "#db6e1f", "line": {"color": "#db6e1f", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Todo", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Todo'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Todo' )"], "props": {"fillcolor": "#e2e2e2", "line": {"color": "#e2e2e2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Backlog", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Backlog'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Backlog' )"], "props": {"fillcolor": "#bec2c8", "line": {"color": "#bec2c8", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Triage", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Triage'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Triage' )"], "props": {"fillcolor": "#FC7840", "line": {"color": "#FC7840", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "sankey-trace-All Time", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}, {"name": "sankey-trace-Last 90 Days", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at >= dateadd('day', -90, sysdate()::date))"], "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}], "parent_name": "Hours To Triage"}, "traces": [{"name": "sankey-trace-All Time", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}, {"name": "sankey-trace-Last 90 Days", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at >= dateadd('day', -90, sysdate()::date))"], "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}], "layout": {"title": {"text": "Flow of Issues"}}}}]}, {"height": "medium", "items": [{"width": 1, "chart": {"name": "issues-created-per-user-over-time", "selector": {"name": "user_name", "type": "multiple", "options": [{"name": "time-to-triage-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "time-to-triage-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(started_triage_at > dateadd('day', -90, current_date ))"], "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "triage-to-start-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "triage-to-start-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "start-to-completed-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "start-to-completed-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "issues-created-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "filters": ["query(completed_at is not null)"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(completed_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('day', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('week', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('year', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issue-distribution-Done", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Done'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Done' )"], "props": {"fillcolor": "#5e6ad2", "line": {"color": "#5e6ad2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Canceled", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Canceled'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Canceled' )"], "props": {"fillcolor": "#95a2b3", "line": {"color": "#95a2b3", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Review", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Review'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Review' )"], "props": {"fillcolor": "#0f783c", "line": {"color": "#0f783c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Progress", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Progress'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Progress' )"], "props": {"fillcolor": "#f2c94c", "line": {"color": "#f2c94c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-On Deck", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'On Deck'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'On Deck' )"], "props": {"fillcolor": "#db6e1f", "line": {"color": "#db6e1f", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Todo", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Todo'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Todo' )"], "props": {"fillcolor": "#e2e2e2", "line": {"color": "#e2e2e2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Backlog", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Backlog'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Backlog' )"], "props": {"fillcolor": "#bec2c8", "line": {"color": "#bec2c8", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Triage", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Triage'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Triage' )"], "props": {"fillcolor": "#FC7840", "line": {"color": "#FC7840", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "sankey-trace-All Time", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}, {"name": "sankey-trace-Last 90 Days", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at >= dateadd('day', -90, sysdate()::date))"], "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}], "parent_name": "issues-created-per-user-over-time"}, "traces": [{"name": "issues-created-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}], "layout": {"legend": {"orientation": "h", "valign": "bottom"}, "title": {"text": "Issues Created Per User"}, "barmode": "stack"}}}, {"width": 1, "chart": {"name": "issues-completed-per-user-over-time", "selector": {"name": "user_name", "type": "multiple", "options": [{"name": "time-to-triage-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "time-to-triage-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(started_triage_at > dateadd('day', -90, current_date ))"], "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "triage-to-start-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "triage-to-start-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "start-to-completed-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "start-to-completed-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "issues-created-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "filters": ["query(completed_at is not null)"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(completed_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('day', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('week', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('year', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issue-distribution-Done", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Done'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Done' )"], "props": {"fillcolor": "#5e6ad2", "line": {"color": "#5e6ad2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Canceled", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Canceled'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Canceled' )"], "props": {"fillcolor": "#95a2b3", "line": {"color": "#95a2b3", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Review", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Review'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Review' )"], "props": {"fillcolor": "#0f783c", "line": {"color": "#0f783c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Progress", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Progress'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Progress' )"], "props": {"fillcolor": "#f2c94c", "line": {"color": "#f2c94c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-On Deck", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'On Deck'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'On Deck' )"], "props": {"fillcolor": "#db6e1f", "line": {"color": "#db6e1f", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Todo", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Todo'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Todo' )"], "props": {"fillcolor": "#e2e2e2", "line": {"color": "#e2e2e2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Backlog", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Backlog'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Backlog' )"], "props": {"fillcolor": "#bec2c8", "line": {"color": "#bec2c8", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Triage", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Triage'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Triage' )"], "props": {"fillcolor": "#FC7840", "line": {"color": "#FC7840", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "sankey-trace-All Time", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}, {"name": "sankey-trace-Last 90 Days", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at >= dateadd('day', -90, sysdate()::date))"], "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}], "parent_name": "issues-created-per-user-over-time"}, "traces": [{"name": "issues-completed-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}], "layout": {"legend": {"orientation": "h", "valign": "bottom"}, "title": {"text": "Issues Completed Per User"}, "barmode": "stack"}}}, {"width": 1, "chart": {"name": "time-to-complete-per-user-over-time", "selector": {"name": "user_name", "type": "multiple", "options": [{"name": "time-to-triage-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "time-to-triage-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(started_triage_at > dateadd('day', -90, current_date ))"], "columns": {"time_to_triage": "avg( datediff('hour', STARTED_TRIAGE_AT, TRIAGED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(time_to_triage)[0]"}}, {"name": "triage-to-start-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "triage-to-start-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_triage_to_start": "avg( datediff('hour', TRIAGED_AT, STARTED_AT ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_triage_to_start)[0]"}}, {"name": "start-to-completed-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "All Time"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "start-to-completed-last-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(TRIAGED_AT > dateadd('day', -90, current_date ))"], "columns": {"hours_start_to_completed": "avg( datediff('hour', started_at, completed_at ) )"}, "props": {"number": {"suffix": " hrs"}, "title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(hours_start_to_completed)[0]"}}, {"name": "issues-created-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', created_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-all-time", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "filters": ["query(completed_at is not null)"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "All Time"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-completed-per-week-past-ninety-days", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(completed_at > dateadd('day', -90, current_date ))"], "columns": {"issues_per_week": "COUNT(distinct id) / count(distinct date_trunc('week', completed_at))"}, "props": {"title": {"text": "Last 90 Days"}, "type": "indicator", "value": "column(issues_per_week)[0]"}}, {"name": "issues-created-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('month', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'month'", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('day', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-day", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'day'", "order_by": ["query(date_trunc('day', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('day', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('week', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-week", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'week'", "order_by": ["query(date_trunc('week', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('week', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-quarter", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'quarter'", "order_by": ["query(date_trunc('quarter', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('quarter', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issues-created-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', created_at)::date asc)"], "props": {"type": "bar", "x": "query(date_trunc('year', created_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "issues-completed-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query(count(*) )"}}, {"name": "time-to-complete-issues-per-year", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'year'", "order_by": ["query(date_trunc('year', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('year', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}, {"name": "issue-distribution-Done", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Done'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Done' )"], "props": {"fillcolor": "#5e6ad2", "line": {"color": "#5e6ad2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Canceled", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Canceled'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Canceled' )"], "props": {"fillcolor": "#95a2b3", "line": {"color": "#95a2b3", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Review", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Review'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Review' )"], "props": {"fillcolor": "#0f783c", "line": {"color": "#0f783c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-In Progress", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'In Progress'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'In Progress' )"], "props": {"fillcolor": "#f2c94c", "line": {"color": "#f2c94c", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-On Deck", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'On Deck'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'On Deck' )"], "props": {"fillcolor": "#db6e1f", "line": {"color": "#db6e1f", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Todo", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Todo'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Todo' )"], "props": {"fillcolor": "#e2e2e2", "line": {"color": "#e2e2e2", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Backlog", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Backlog'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Backlog' )"], "props": {"fillcolor": "#bec2c8", "line": {"color": "#bec2c8", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "issue-distribution-Triage", "changed": true, "model": {"name": "issues-stages-daily", "sql": "WITH \nworkflow_state_modified as (\n          select \n              id, \n              name, \n              color, \n              position,\n              CASE name\n                  wHEn 'Triage' THEN 0\n                  WHEN 'Backlog' THEN 1 \n                  WHEN 'Todo' THEN 2 \n                  WHEN 'On Deck' THEN 3 \n                  WHEN 'In Progress' THEN 4\n                  WHEN 'In Review' THEN 5 \n                  WHEN 'Canceled' THEN 6\n                  WHEN 'Done' THEN 7 \n              END as modified_position\n                  \n          from workflow_state\n          ORDER BY modified_position asc\n), \nissue_history_modified as (\n    select \n        *, \n        row_number() over(partition by issue_id ORDER BY created_at asc) as rn\n    from issue_history \n),\nchange_log_sans_current as (\n      SELECT \n          ih.id,\n          ih.issue_id, \n          ih.created_at as issue_changed_at,\n          i.created_at as issue_created_at,\n          ih.changes,\n          i.identifier,\n          ows.modified_position as old_position,\n          ows.name as old_name,\n          ows.color as old_color,\n          nws.modified_position as new_position,\n          nws.name as new_name,\n          nws.color as new_color,\n          COALESCE(ows.name, cws.name) as change_log_name,\n          COALESCE(\n            lag(ih.created_at) OVER(PARTITION BY issue_id ORDER BY ih.created_at), \n            issue_created_at\n          ) as  valid_from, \n          dateadd('ms', -1, ih.created_at) as valid_to, \n          row_number() OVER(Partition by issue_id ORDER by ih.created_at desc) = 1 as is_current, \n          ih.rn\n      from issue_history_modified ih \n      JOIN issue i \n          on i.id = ih.issue_id\n      LEFT JOIN workflow_state_modified nws\n          on nws.id = ih.to_state_id \n      LEFT JOIN workflow_state_modified ows \n          ON ows.id = ih.from_state_id\n      left join workflow_state_modified cws \n          on cws.id = i.state_id \n      WHERE ih.rn = 1 or ih.to_state_id is not null           \n      ORDER BY issue_id, ih.created_at asc\n)\n--SELECT * FROM change_log_sans_current where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \nchange_log as (\n    SELECT \n        id, \n        issue_id, \n        identifier, \n        change_log_name, \n        valid_from, \n        valid_to,\n        false as is_current\n    FROM change_log_sans_current\n    WHERE not (rn = 1 and is_current)\n    \n    UNION ALL \n    \n    SELECT \n        id, \n        issue_id, \n        identifier, \n        Coalesce(new_name, change_log_name) as change_log_name, \n        issue_changed_at as valid_from, \n        '9999-01-01 12:00:00.000 +0000'::timestamp_tz as valid_to,\n        true as is_current\n    FROM change_log_sans_current\n    WHERE is_current \n)\n--SELECT * FROM change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndaily_change_log as (\n    SELECT \n        issue_id, \n        identifier, \n        max_by(change_log_name, valid_from) as change_log_name, \n        valid_from::date as valid_from_day, \n        coalesce(\n            dateadd(\n                'day', \n                -1,\n                lead(valid_from::date) OVER(partition by issue_id order by valid_from::date)\n            ),\n            '9999-01-01'::date\n        )as valid_to_day\n    FROM change_log \n    GROUP BY \n        issue_id, \n        identifier,\n        valid_from::date\n)\n--SELECT * FROM daily_change_log where issue_id = '357e8e55-d741-402c-af16-7733a97dad6f';\n, \ndate_spine as (\n    with spine as (\n      select (select min(created_at) from issue)::date as as_of_date \n      union all\n      select dateadd('day', 1, as_of_date) from spine\n      where as_of_date <= sysdate()::Date\n    )\n    select * from spine\n),\nstate_names as (\n    select distinct name from workflow_state_modified\n), \nscaffolding as (\n    SELECT \n        ds.as_of_date, \n        sn.name\n    FROM date_spine ds \n    CROSS JOIN state_names sn \n)\nSELECt \n    s.as_of_date, \n    s.name as stage_name, \n    coalesce(\n        count(distinct dcl.issue_id), \n        0\n    ) as issues\nFROM scaffolding s\nLEFT JOIN daily_change_log dcl \n    ON s.as_of_date between dcl.valid_from_day and dcl.valid_to_day\n    AND s.name = dcl.change_log_name\nGROUP BY 1,2\nORDER BY as_of_date, stage_name ", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Triage'", "order_by": ["query(as_of_date  asc)", "query(issues desc)"], "filters": ["query(stage_name = 'Triage' )"], "props": {"fillcolor": "#FC7840", "line": {"color": "#FC7840", "shape": "spline"}, "stackgroup": "one", "type": "scatter", "x": "query(as_of_date::varchar )", "y": "query(issues)"}}, {"name": "sankey-trace-All Time", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'All Time'", "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}, {"name": "sankey-trace-Last 90 Days", "changed": true, "model": {"name": "sankey-model", "sql": "WITH workflow_state_modified as (\n    select \n        id, \n        name, \n        color, \n        position,\n        CASE name\n            wHEn 'Triage' THEN 0\n            WHEN 'Backlog' THEN 1 \n            WHEN 'Todo' THEN 2 \n            WHEN 'On Deck' THEN 3 \n            WHEN 'In Progress' THEN 4\n            WHEN 'In Review' THEN 5 \n            WHEN 'Canceled' THEN 6\n            WHEN 'Done' THEN 7 \n        END as modified_position\n            \n    from workflow_state\n    ORDER BY modified_position asc\n)\nSELECT \n    ih.id,\n    ih.issue_id, \n    ih.created_at, \n    ih.changes,\n    i.identifier,\n    ows.modified_position as old_position,\n    ows.name as old_name,\n    ows.color as old_color,\n    nws.modified_position as new_position,\n    nws.name as new_name,\n    nws.color as new_color\n    \nfrom issue_history ih \nJOIN issue i \n    on i.id = ih.issue_id\nJOIN workflow_state_modified nws\n    on nws.id = ih.to_state_id \nJOIN workflow_state_modified ows \n    ON ows.id = ih.from_state_id\nleft join workflow_state_modified cws \n    on cws.id = i.state_id \nORDER BY issue_id, ih.created_at asc\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "'Last 90 Days'", "filters": ["query(created_at >= dateadd('day', -90, sysdate()::date))"], "columns": {"source": "old_position", "target": "new_position", "value": "count(distinct id)"}, "props": {"link": {"source": "column(source)", "target": "column(target)", "value": "column(value)"}, "node": {"color": ["#FC7840", "#bec2c8", "#e2e2e2", "#db6e1f", "#f2c94c", "#0f783c", "#95a2b3", "#5e6ad2"], "label": ["Triage", "Backlog", "Todo", "On Deck", "In Progress", "In Review", "Canceled", "Done"], "pad": 5.0, "x": [0.0, 0.2, 0.32, 0.44, 0.58, 0.69, 0.83, 0.99], "y": [0.9, 0.9, 0.6, 0.4, 0.6, 0.4, 0.2, 0.5]}, "type": "sankey"}}], "parent_name": "issues-created-per-user-over-time"}, "traces": [{"name": "time-to-complete-issues-per-user-per-month", "changed": true, "model": {"name": "issues", "sql": "select \n  i.*, \n  ua.display_name as assignee_name, \n  uc.display_name as creator_name\nfrom issue i \nleft JOIN users ua \n  on ua.id = i.assignee_id\nleft JOIN users uc \n  on uc.id = i.creator_id\n", "target": {"name": "remote-snowflake", "database": "RAW", "username": "JAREDVISIVO", "password": "**********", "db_schema": "LINEAR", "account": "bu13083.us-east-2.aws", "warehouse": "DEV", "role": "PROD", "type": "snowflake"}}, "cohort_on": "creator_name", "order_by": ["query(date_trunc('month', completed_at)::date asc)"], "filters": ["query(completed_at is not null)"], "props": {"type": "bar", "x": "query(date_trunc('month', completed_at)::date::varchar)", "y": "query( avg( datediff('minute', created_at, completed_at) / 1440 ) )"}}], "layout": {"legend": {"orientation": "h", "valign": "bottom"}, "title": {"text": "Time To Complete Issues Per User"}, "yaxis": {"title": {"text": "Days"}}}}}]}]}]}}